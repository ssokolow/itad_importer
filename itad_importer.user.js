// Generated by CoffeeScript 1.12.7

/* IsThereAnyDeal.com Collection Importer
// ==UserScript==
// @name IsThereAnyDeal.com Collection Importer
// @version 0.1b16
// @namespace http://isthereanydeal.com/
// @description Adds buttons to various sites to export your game lists to ITAD
// @icon http://s3-eu-west-1.amazonaws.com/itad/images/banners/50x50.gif
// @license MIT
// @supportURL https://github.com/ssokolow/itad_importer/issues
// @grant GM_info
// @require https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js
//
// @match *://www.dotemu.com/*
// @match *://fireflowergames.com/my-lists/*
// @match *://flyingbundle.com/users/account
// @match *://www.flyingbundle.com/users/account
// @match *://www.gog.com/account*
// @match *://www.gog.com/order/status/*
// @match *://groupees.com/purchases*
// @match *://groupees.com/users/*
// @match *://www.humblebundle.com/home*
// @match *://www.humblebundle.com/downloads?key=*
// @match *://www.humblebundle.com/s?key=*
// @match *://indiegamestand.com/wallet.php
// @match *://indiegamestand.com/wishlist.php
// @match *://www.shinyloot.com/m/games*
// @match *://www.shinyloot.com/m/wishlist*
// ==/UserScript==

Any patches to this script should be made against the original
CoffeeScript source file available (and documented) at:

  https://github.com/ssokolow/itad_importer

Copyright Â©2014-2015 Stephan Sokolow
License: MIT (http://opensource.org/licenses/MIT)

TODO:
- Add a `@downloadURL` for the script

Note: While we do not use GM_info, we must request it to force the userscript
to be isolated from the page so its jQuery doesn't collide with the site's
jQuery.
 */
var BUTTON_LABEL, ITAD_12X12, ITAD_14X14_GRAY, attr, dotemu_add_button, gog_prepare_title, humble_make_button, humble_make_library_button, humble_parse_single, humble_read_library, scrapeGames, scrapers, shinyloot_insert_button, titlecase_cb, underscore_re, word_re,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

BUTTON_LABEL = "Export to ITAD";

ITAD_12X12 = "data:image/png;base64,\niVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAMAAABhq6zVAAAAZlBMVEUEbrIEbrIJcbQLcrQefboo\ng70rhb4thr8vh78zicA6jcNCksVLl8hWnctZn8xdoc1ipM9ipc9kptB5stZ6staCt9mHutqJu9ud\nxuGozeSrz+W72OrA2+zJ4O7U5vLX6PPn8fj3+vyC0mvkAAAAAXRSTlMAQObYZgAAAFdJREFUCB0F\nwYkCgUAABcA3CpElRyRH6/9/0kwCQALtZSwNglN9Pt5LR+jqGuelEaYbeBXh04P7KMwDeF6E8l1h\nW1vh8PsO/bWeiGPdl/kzdYjdBkACQP5LygQ7CM8T6wAAAABJRU5ErkJggg==";

ITAD_14X14_GRAY = "data:image/png;base64,\niVBORw0KGgoAAAANSUhEUgAAAA4AAAAOCAMAAAAolt3jAAAAdVBMVEUEbrKTlaCTlZ+TlZ+UlqCY\nmaSYmqWcnqednqieoKmfoaugoqulprCvsLivsbiwsrmztLuztby2uL7BwsjDxcrExcvIyc7V1trW\n1trX2Nvn5+rp6evx8vP19fb39/j4+Pn5+fr7+/v7+/z8/Pz8/P39/f3///8J+FboAAAAJHRSTlMA\ny+rw8PHx8fHx8vLy9PT09PT19vf39/n5+fz8/f3+/v7+/v695LIzAAAAcUlEQVQIHQXBhwGCQAAE\nsHui2FHsBeyy/4gmSQGgJKWCeTNFVQJNN9yH2xJB+z3WZuf3kjDuD+B8I6wfIzAbpsLuCrg3QtsD\n9TAXJq8tOHYEl9+W0eHbEPaf06u/PvoWsXmuTNrdegwp1QJAVZICQMkf1qQG7Yh+Z60AAAAASUVO\nRK5CYII=";

underscore_re = /_/g;

word_re = /\b\w+/g;

titlecase_cb = function(s) {
  return s.charAt(0).toUpperCase() + s.substr(1).toLowerCase();
};

attr = function(node, name) {
  return node.getAttribute(name);
};

dotemu_add_button = function(parent_selector) {
  return $('<button></button>').html(BUTTON_LABEL).css({
    float: 'right',
    marginRight: '5px'
  }).appendTo(parent_selector);
};

gog_prepare_title = function(elem) {
  var dom;
  dom = $('.product-title', elem).clone();
  $('._product-flag', dom).remove();
  return dom.text();
};

humble_make_library_button = function() {
  var button, holders, updateButton;
  button = $('<button class="download-button"></button>').html(BUTTON_LABEL).css({
    display: 'inline',
    border: '1px solid #CCC',
    background: '#F1F3F6',
    padding: '5px 10px 5px 10px',
    marginLeft: '10px'
  });
  holders = [
    {
      tab: $("a.tabbar-tab[href$='library'"),
      holder: $('.js-library-holder'),
      insertSelector: '.top-controls'
    }, {
      tab: $("a.tabbar-tab[href$='keys'"),
      holder: $('.js-key-manager-holder'),
      insertSelector: '.header .container:last'
    }, {
      tab: $("a.tabbar-tab[href$='purchases'"),
      holder: $('.js-purchase-holder'),
      insertSelector: '.header .container:last'
    }
  ];
  return updateButton = function(holder, insertSelector) {
    var button_inserter, enableObserver, found, found2, h, i, len, observeConfig, observer;
    found = holder.find(insertSelector);
    if (found.length > 0) {
      found2 = found.find(".itad_btn");
      if (found2.length === 0) {
        observer.disconnect();
        button.appendTo(found);
        enableObserver(observer);
      }
    }
    observeConfig = {
      childList: true,
      subtree: true
    };
    enableObserver = function(observer) {
      var h, i, len, results1;
      results1 = [];
      for (i = 0, len = holders.length; i < len; i++) {
        h = holders[i];
        results1.push(observer.observe(h.holder[0], observeConfig));
      }
      return results1;
    };
    observer = new MutationObserver(function(mutations, observer) {
      return mutations.forEach(function(mutation) {
        var h, target;
        target = mutation.target;
        if (!(indexOf.call((function() {
          var i, len, results1;
          results1 = [];
          for (i = 0, len = holders.length; i < len; i++) {
            h = holders[i];
            results1.push(h.holder[0]);
          }
          return results1;
        })(), target) >= 0)) {
          return;
        }
        holder = $(mutation.target);
        console.log("mutation: " + holder.attr('class'));
        insertSelector = holder.data('insertSelector');
        return updateButton(holder, insertSelector);
      });
    });
    button_inserter = function(tab, holder, insertSelector, prepend) {
      var found_early;
      holder.data('insertSelector', insertSelector);
      found_early = holder.find(insertSelector);
      if (found_early.length > 0) {
        button.appendTo(found_early);
      }
      return tab.on('click', function() {
        return updateButton(holder, insertSelector);
      });
    };
    for (i = 0, len = holders.length; i < len; i++) {
      h = holders[i];
      button_inserter(h.tab, h.holder, h.insertSelector, false);
    }
    enableObserver(observer);
    return button;
  };
};

humble_make_button = function() {
  var a, button, label;
  label = $('<span class="label"></span>').html(BUTTON_LABEL);
  a = $('<a class="a" href="#"></span>').html(BUTTON_LABEL).css('padding-left', '9px');
  return button = $('<div class="flexbtn active noicon"></div>').append('<div class="right"></div>').append(label).append(a);
};

humble_parse_single = function(cb) {
  var x;
  return cb(((function() {
    var i, len, ref, results1;
    ref = $('div.row');
    results1 = [];
    for (i = 0, len = ref.length; i < len; i++) {
      x = ref[i];
      results1.push({
        title: x.textContent.trim(),
        sources: ['humblestore']
      });
    }
    return results1;
  })()).has(' .downloads.windows .download, .downloads.linux .download, .downloads.mac .download, .downloads.android .download').find('div.title'));
};


/*
 * Use website's model objects to collect and process game data.
 *
 *  Because the actual data isn't easily accessible, this creates
 *  a new instance of the model object, and probably re-downloads
 *  all the game information, so should only be run when the import
 *  button is pressed, to prevent slowdowns of the website.
 */

humble_read_library = function(cb) {
  return requirejs(['downloadPages/orderCollection'], function(OrderCollection) {
    var addItem, g, hasApp, items, list, name, orderList, orderModels, processOrder, srcs;
    orderList = (function() {
      var i, len, results1;
      results1 = [];
      for (i = 0, len = gamekeys.length; i < len; i++) {
        g = gamekeys[i];
        results1.push({
          gamekey: g
        });
      }
      return results1;
    })();
    orderModels = new OrderCollection(orderList);
    items = {};
    hasApp = function(subProduct) {
      var download, i, len, ref, ref1;
      ref = subProduct.downloads;
      for (i = 0, len = ref.length; i < len; i++) {
        download = ref[i];
        if ((ref1 = download.platform) === 'windows' || ref1 === 'mac' || ref1 === 'linux') {
          return true;
        }
      }
      return false;
    };
    addItem = function(name, source) {
      var sources;
      if (name in items) {
        sources = items[name];
        if (!(indexOf.call(sources, source) >= 0)) {
          return sources.push(source);
        }
      } else {
        return items[name] = [source];
      }
    };
    processOrder = function(orderModel) {
      var i, j, keyType, len, len1, ref, ref1, subProduct, subProductHumanName, subProductLFN, tpkHumanName, tpkLFN, tpkLFNAttr, tpkModel;
      ref = orderModel.getSubProducts();
      for (i = 0, len = ref.length; i < len; i++) {
        subProduct = ref[i];
        subProductHumanName = subProduct.human_name;
        if (subProduct.library_family_name) {
          subProductLFN = subProduct.library_family_name;
        } else {
          subProductLFN = "";
        }
        if (subProductLFN === 'hidden') {
          return;
        }
        if (hasApp(subProduct)) {
          addItem(subProductHumanName, 'humblestore');
        }
      }
      ref1 = orderModel.getTpkModels();
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        tpkModel = ref1[j];
        tpkLFNAttr = tpkModel.get('library_family_name');
        tpkLFN = tpkLFNAttr ? tpkLFNAttr : "";
        keyType = tpkModel.get('key_type');
        tpkHumanName = tpkModel.get('human_name');
        if (!tpkHumanName) {
          tpkHumanName = orderModel.getProduct().human_name;
        }
        if (tpkLFN === 'hidden') {
          return;
        }
        addItem(tpkHumanName, keyType);
      }
    };
    orderModels.forEach(function(orderModel) {
      if (orderModel.loaded) {
        return processOrder(orderModel);
      } else {
        return orderModel.fetch({
          success: function(fetched) {
            return processOrder(orderModel);
          }
        });
      }
    });
    list = (function() {
      var results1;
      results1 = [];
      for (name in items) {
        srcs = items[name];
        results1.push({
          title: name,
          sources: srcs
        });
      }
      return results1;
    })();
    return cb(list);
  });
};

shinyloot_insert_button = function() {
  return $('<button></button>').html(BUTTON_LABEL).css({
    background: 'url("/images/filters/sort-background-inactive.png") ' + 'repeat-x scroll 0% 0% transparent',
    border: '1px solid #666',
    borderRadius: '2px',
    boxShadow: '0px 1px 6px #777',
    color: '#222',
    fontSize: '12px',
    fontWeight: 'bold',
    fontFamily: 'Arial,Helvetica,Sans-serif',
    float: 'right',
    padding: '2px 8px',
    marginRight: '-6px',
    verticalAlign: 'middle'
  }).appendTo('#content .header');
};

scrapers = {
  'www.dotemu.com': {
    'https://www\\.dotemu\\.com/(en|fr|es)/user/?': [
      {
        'source_id': 'dotemu',
        'game_list': function(cb) {
          var x;
          return cb((function() {
            var i, len, ref, results1;
            ref = $('div.my-games div.field-title a');
            results1 = [];
            for (i = 0, len = ref.length; i < len; i++) {
              x = ref[i];
              results1.push({
                title: attr(x, 'title'),
                url: x.href,
                sources: ['dotemu']
              });
            }
            return results1;
          })());
        },
        'insert_button': function() {
          return dotemu_add_button('div.my-games h2.pane-title');
        }
      }, {
        'source_id': 'dotemu',
        'game_list': function(cb) {
          var x;
          return cb((function() {
            var i, len, ref, results1;
            ref = $('div.user-wishlist .views-field-title-1 a');
            results1 = [];
            for (i = 0, len = ref.length; i < len; i++) {
              x = ref[i];
              results1.push({
                title: attr(x, 'title'),
                url: x.href,
                sources: ['dotemu']
              });
            }
            return results1;
          })());
        },
        'insert_button': function() {
          return dotemu_add_button('.user-wishlist h2.pane-title');
        },
        'is_wishlist': true
      }
    ]
  },
  'fireflowergames.com': {
    '^http://fireflowergames\\.com/my-lists/(edit-my|view-a)-list/\\?.+': {
      'source_id': 'fireflower',
      'game_list': function(cb) {
        var results, x;
        results = $('table.wl-table tbody td.check-column input:checked').parents('tr').find('td.product-name a');
        if (!results.length) {
          results = $('table.wl-table td.product-name a');
        }
        return cb((function() {
          var i, len, results1;
          results1 = [];
          for (i = 0, len = results.length; i < len; i++) {
            x = results[i];
            results1.push({
              title: $(x).text().trim(),
              url: x.href,
              sources: ['fireflower']
            });
          }
          return results1;
        })());
      },
      'insert_button': function() {
        return $('<a class="button"></a>').html(BUTTON_LABEL).wrap('<td></td>').appendTo($('table.wl-actions-table tbody:first').find('tr:last'));
      },
      'is_wishlist': true
    }
  },
  'flyingbundle.com': {
    'https?://(www\\.)?flyingbundle\\.com/users/account': {
      'source_id': 'flying_bundle',
      'game_list': function(cb) {
        var x;
        return cb((function() {
          var i, len, ref, results1;
          ref = $(".div_btn_download[href^='/users/sources']").parents('li').find(':first');
          results1 = [];
          for (i = 0, len = ref.length; i < len; i++) {
            x = ref[i];
            results1.push({
              title: $(x).text(),
              sources: 'flying_bundle'
            });
          }
          return results1;
        })());
      },
      'insert_button': function() {
        var li;
        li = $("<li></li>").appendTo('.legenda_points ul');
        return $('<a href="#">' + BUTTON_LABEL + ' <img src="' + ITAD_14X14_GRAY + '" /></a>').css('text-transform', 'uppercase').wrap("<li></li>").appendTo(li);
      }
    }
  },
  'www.gog.com': {
    '^https://www\\.gog\\.com/order/status/.+': {
      'source_id': 'gog',
      'game_list': function(cb) {
        var x;
        console.debug("game_list called for GOG order status page");
        return cb((function() {
          var i, len, ref, results1;
          ref = $('.order + .container .product-row');
          results1 = [];
          for (i = 0, len = ref.length; i < len; i++) {
            x = ref[i];
            results1.push({
              title: gog_prepare_title(x),
              sources: ['gog']
            });
          }
          return results1;
        })());
      },
      'insert_button': function() {
        console.debug("insert_button called for GOG order status page");
        $(".order-article__btn-pointer-wrapper .order-article__btn-pointer").css({
          marginTop: -4,
          zIndex: 20
        });
        $('.order-article__dropdown-items').css('z-index', 10);
        return $("<a class='_dropdown__item ng-scope'></a>").html("On ITAD").prependTo($('.order-message__actions ._dropdown__items').filter(':first'));
      }
    },
    '^https?://www\\.gog\\.com/account(/games(/(shelf|list))?)?/?(\\?|$)': {
      'source_id': 'gog',
      'game_list': function(cb) {
        var x;
        console.debug("game_list called for GOG collection page");
        return cb((function() {
          var i, len, ref, results1;
          ref = $('.product-row');
          results1 = [];
          for (i = 0, len = ref.length; i < len; i++) {
            x = ref[i];
            results1.push({
              id: attr(x, 'gog-product'),
              title: gog_prepare_title(x),
              sources: ['gog']
            });
          }
          return results1;
        })());
      },
      'insert_button': function() {
        console.debug("insert_button called for GOG collection page");
        return $("<span></span>").css({
          float: 'right',
          cursor: 'pointer',
          position: 'relative',
          marginBottom: '-2em',
          zIndex: 1
        }).html(BUTTON_LABEL + " (This Page)").prependTo($('.collection-header').filter(':first'));
      }
    }
  },
  'groupees.com': {
    'https?://(www\\.)?groupees\\.com/(purchases|users/\\d+)': {
      'source_id': 'other',
      'game_list': function(cb) {
        var x;
        return cb((function() {
          var i, len, ref, results1;
          ref = $('.product ul.dropdown-menu').parents('.details').find('h3');
          results1 = [];
          for (i = 0, len = ref.length; i < len; i++) {
            x = ref[i];
            results1.push({
              title: x.textContent.trim(),
              sources: ['other']
            });
          }
          return results1;
        })());
      },
      'insert_button': function() {
        return $("<button></button>").css({
          float: 'right'
        }).addClass('button btn btn-sm btn-primary').html(BUTTON_LABEL + " (Selected Bundle)").insertBefore("input[name='search']");
      }
    }
  },
  'www.humblebundle.com': {
    'https://www\\.humblebundle\\.com/home/library/?': {
      'source_id': 'humblestore',
      'game_list': function(cb) {
        var x;
        return cb((function() {
          var i, len, ref, results1;
          ref = $('.subproduct-selector h2');
          results1 = [];
          for (i = 0, len = ref.length; i < len; i++) {
            x = ref[i];
            results1.push({
              title: x.textContent.trim(),
              sources: ['humblestore']
            });
          }
          return results1;
        })());
      },
      'insert_button': humble_make_library_button
    },
    'https://www\\.humblebundle\\.com/home/?': {
      'source_id': 'humblestore',
      'game_list': humble_read_library,
      'insert_button': humble_make_library_button
    },
    'https://www\\.humblebundle\\.com/(download)?s\\?key=.+': {
      'source_id': 'humblestore',
      'game_list': humble_parse_single,
      'insert_button': function() {
        var parent;
        parent = $('.js-gamelist-holder').parents('.whitebox');
        parent.find('.staple.s4').remove();
        return humble_make_button().css({
          position: 'absolute',
          top: 11,
          right: 17
        }).appendTo(parent);
      }
    }
  },
  'indiegamestand.com': {
    'https://indiegamestand\\.com/wallet\\.php': {
      'source_id': 'indiegamestand',
      'game_list': function(cb) {
        var x;
        return cb((function() {
          var i, len, ref, ref1, ref2, ref3, results1;
          ref = $('#wallet_contents .line-item');
          results1 = [];
          for (i = 0, len = ref.length; i < len; i++) {
            x = ref[i];
            results1.push({
              url: (ref1 = $('.game-thumb', x)) != null ? (ref2 = ref1.closest('a')) != null ? (ref3 = ref2[0]) != null ? ref3.href : void 0 : void 0 : void 0,
              title: $('.game-title', x).text().trim(),
              sources: ['indiegamestand']
            });
          }
          return results1;
        })());
      },
      'insert_button': function() {
        return $('<div class="request key"></div>').html(BUTTON_LABEL).wrapInner("<div></div>").css({
          display: 'inline-block',
          marginLeft: '1em',
          verticalAlign: 'middle'
        }).appendTo('#game_wallet h2');
      }
    },
    'https://indiegamestand\\.com/wishlist\\.php': {
      'source_id': 'indiegamestand',
      'game_list': function(cb) {
        var x;
        return cb((function() {
          var i, len, ref, ref1, ref2, ref3, results1;
          ref = $('#store_browse_game_list .game_list_item');
          results1 = [];
          for (i = 0, len = ref.length; i < len; i++) {
            x = ref[i];
            results1.push({
              url: (ref1 = $('.game-thumb', x)) != null ? (ref2 = ref1.closest('a')) != null ? (ref3 = ref2[0]) != null ? ref3.href : void 0 : void 0 : void 0,
              title: $('.game_details h3', x).text().trim(),
              sources: ['indiegamestand']
            });
          }
          return results1;
        })());
      },
      'is_wishlist': true,
      'insert_button': function() {
        var innerDiv;
        innerDiv = $("<div></div>").css({
          paddingLeft: '10px',
          background: 'url("images/icon-arrow.png") no-repeat scroll ' + '155px 45% transparent'
        });
        return $('<div class="request key"></div>').html(BUTTON_LABEL).wrapInner(innerDiv).css({
          display: 'inline-block',
          verticalAlign: 'middle',
          float: 'right',
          width: '170px',
          height: '21px',
          background: 'url("images/btn-bg-blue-longer.png") ' + 'no-repeat scroll 0px 0px transparent',
          lineHeight: '21px',
          color: '#FFF',
          whiteSpace: 'nowrap',
          marginLeft: '1em',
          marginBottom: '4px',
          fontSize: '12px',
          cursor: 'pointer'
        }).css({
          margin: '11px 5px auto auto'
        }).appendTo('#store_browse_game_list .header');
      }
    }
  },
  'www.shinyloot.com': {
    'https?://www\\.shinyloot\\.com/m/games/?': {
      'source_id': 'shinyloot',
      'game_list': function(cb) {
        var x;
        return cb((function() {
          var i, len, ref, results1;
          ref = $('#accordion .ui-widget-content');
          results1 = [];
          for (i = 0, len = ref.length; i < len; i++) {
            x = ref[i];
            results1.push({
              url: $('.right-float a img', x).closest('a')[0].href,
              title: $(x).prev('h3').text().trim(),
              sources: ['shinyloot']
            });
          }
          return results1;
        })());
      },
      'insert_button': shinyloot_insert_button
    },
    'https?://www\\.shinyloot\\.com/m/wishlist/?': {
      'source_id': 'shinyloot',
      'game_list': function(cb) {
        var x;
        return cb((function() {
          var i, len, ref, results1;
          ref = $('.gameItem');
          results1 = [];
          for (i = 0, len = ref.length; i < len; i++) {
            x = ref[i];
            results1.push({
              url: $('.gameInfo + a', x)[0].href,
              title: $('.gameName', x).text().trim()
            });
          }
          return results1;
        })());
      },
      'insert_button': shinyloot_insert_button,
      'is_wishlist': true
    }
  }
};

scrapers['www.flyingbundle.com'] = scrapers['flyingbundle.com'];

scrapers['www.groupees.com'] = scrapers['groupees.com'];

scrapeGames = function(scraper_obj) {
  return scraper_obj.game_list(function(game_list) {
    var form, params, url;
    params = {
      json: JSON.stringify(game_list),
      source: scraper_obj.source_id
    };
    url = scraper_obj.is_wishlist != null ? 'https://isthereanydeal.com/outside/user/wait/3rdparty' : 'https://isthereanydeal.com/outside/user/collection/3rdparty';
    form = $("<form id='itad_submitter' method='POST' />").attr('action', url);
    params['returnTo'] = location.href;
    form.css({
      display: 'none'
    });
    $.each(params, function(key, value) {
      return $("<input type='hidden' />").attr("name", key).attr("value", value).appendTo(form);
    });
    $(document.body).append(form);
    return form.submit();
  });
};

$(function() {
  var e, fn, i, len, profile, profile_matched, ref, regex, results1, scraper;
  console.log("Loading ITAD importer...");
  if (scrapers[location.host]) {
    console.log("Matched domain: " + location.host);
    ref = scrapers[location.host];
    results1 = [];
    for (regex in ref) {
      profile = ref[regex];
      try {
        profile_matched = location.href.match(regex);
      } catch (error) {
        e = error;
        console.error("Bad regex: " + regex);
      }
      if (profile_matched) {
        console.log("Matched profile: " + regex);
        $('.itad_btn, #itad_dlg, .itad_close').remove();
        if (!Array.isArray(profile)) {
          profile = [profile];
        }
        fn = function(scraper) {
          console.log("Inserting ITAD button for source ID: " + scraper.source_id);
          return typeof scraper.insert_button === "function" ? scraper.insert_button().addClass('itad_btn').click(function() {
            console.log("ITAD button clicked");
            return scrapeGames(scraper);
          }) : void 0;
        };
        for (i = 0, len = profile.length; i < len; i++) {
          scraper = profile[i];
          fn(scraper);
        }
        break;
      } else {
        results1.push(void 0);
      }
    }
    return results1;
  }
});
